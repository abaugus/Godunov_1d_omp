[1mdiff --git a/Godunov_1d_omp/source/main.cpp b/Godunov_1d_omp/source/main.cpp[m
[1mindex 6ce2962..06b13e7 100644[m
[1m--- a/Godunov_1d_omp/source/main.cpp[m
[1m+++ b/Godunov_1d_omp/source/main.cpp[m
[36m@@ -294,17 +294,6 @@[m [mvoid iteration(int numb)[m
 [m
 	time_max = time_max_array[PROBLEM];[m
 [m
[31m-#ifdef OUTPUT_N_SMOOTH[m
[31m-[m
[31m-	double time_control [N_smooth];[m
[31m-	double k_step = time_max_array[PROBLEM] / N_smooth;[m
[31m-	printf("step %lf\n", k_step);[m
[31m-	for (int i = 0; i < N_smooth; i++)[m
[31m-	{[m
[31m-		time_control[i] = (i + 1)*k_step;[m
[31m-//		printf("%lf\n", time_control[i]);[m
[31m-	}[m
[31m-#endif[m
 [m
 	/***** Вычислительный цикл метода Годунова *****/[m
 [m
[36m@@ -520,118 +509,6 @@[m [mvoid iteration(int numb)[m
 [m
 #ifdef OUTPUT_N_SMOOTH[m
 [m
[31m-		for (int k = 0; k < N_smooth; k++)[m
[31m-		{[m
[31m-[m
[31m-			if (fabs(timer - time_control[k]) <= tau && proverka[k] == 0)[m
[31m-			{[m
[31m-[m
[31m-#ifndef NC					[m
[31m-				sprintf(FileName, "workspace/%03d/N%03d_P%1d_SLV%1d_TERM%.0lf_%c_%6.4lf.dat", numcells, numcells, PROBLEM, RUNGE_KUTTA, A_TERM*K_TERM, (char)TYPE, time_control[k]);[m
[31m-				fout = fopen(FileName, "w");[m
[31m-				fprintf(fout, "Timer: %lf\n", timer);[m
[31m-#else[m
[31m-				sprintf(FileName2, "workspace/%03d/N%03d_P%1d_SLV%1d_TERM%.0lf_%c_%6.4lf_NC.dat", numcells, numcells, PROBLEM, RUNGE_KUTTA, A_TERM*K_TERM, (char)TYPE, time_control[k]);[m
[31m-				fout_NC = fopen(FileName2, "w");[m
[31m-				fprintf(fout_NC, "Timer: %lf\n", timer);[m
[31m-#endif[m
[31m-[m
[31m-					for (int i = 0; i < numcells; i++)  // вывод всегда по 100 точек ( с первой итерации которые )[m
[31m-					{[m
[31m-#ifndef NC[m
[31m-						//x_layer[i] = i*dx + 0.5*dx-0.4533*timer;[m
[31m-						x_layer[i] = i*dx + 0.5*dx;[m
[31m-[m
[31m-#else[m
[31m-						//x_layer_NC[i] = i*dx + 0.5*dx - D_analit*timer - DISC_POINT;      //без деления на t^alpha[m
[31m-#ifdef alpha[m
[31m-						x_layer_NC[i] = (i*dx + 0.5*dx - D_analit*timer - DISC_POINT) / (C1*pow(timer, alpha));[m
[31m-#endif[m
[31m-[m
[31m-#ifdef NC2[m
[31m-						x_layer_NC[i] = (i*dx + 0.5*dx - DISC_POINT - D_analit*timer)/dx;[m
[31m-#else[m
[31m-						x_layer_NC[i] = (i*dx + 0.5*dx - DISC_POINT - D_analit*timer);[m
[31m-					//	x_layer_NC[i] = (i*dx + 0.5*dx - 0.43*timer);[m
[31m-#endif[m
[31m-#endif[m
[31m-[m
[31m-					//	x_layer_NC[i] = (i*dx + 0.5*dx - DISC_POINT) / (D_analit*pow(timer, alpha)); //еще один случай[m
[31m-[m
[31m-						ds = R[i];[m
[31m-						//us = U[i] - 0.4533;[m
[31m-						us = U[i];[m
[31m-						ps = P[i];[m
[31m-						cs = sqrt(GAMMA*P[i] / R[i]);[m
[31m-						es = P[i] / pow(R[i], GAMMA);[m
[31m-						es_diff = S_diff[i];[m
[31m-[m
[31m-#ifdef SW_POINTS_PRINT[m
[31m-						//-----------------------------[m
[31m-					[m
[31m-[m
[31m-#if (PROBLEM == 0 || PROBLEM == 1)[m
[31m-							if (P[i] < (initial_pressure(0.05) - DELTA) && P[i] > (initial_pressure(0.95) + DELTA)) w_num_p[k]++;[m
[31m-							if (R[i] < (initial_density(0.05) - DELTA) && R[i] > (initial_density(0.95) + DELTA)) w_num_r[k]++;[m
[31m-							if (U[i] < (initial_velocity(0.05) - DELTA) && U[i] > (initial_velocity(0.95) + DELTA)) w_num_u[k]++;[m
[31m-#elif (PROBLEM == 2)[m
[31m-							// shock wave checking[m
[31m-							if (P[i] < (1.401789770179879 - DELTA) && P[i] > (1.0 + DELTA)) w_num_p[k]++;[m
[31m-							if (R[i] < (1.271413930046081 - DELTA) && R[i] > (1.0 + DELTA)) w_num_r[k]++;[m
[31m-							if (U[i] < (0.292868067614595 - DELTA) && U[i] > (0.0 + DELTA) && i>numcells/2) w_num_u[k]++;[m
[31m-#elif (PROBLEM == 8)[m
[31m-							if (P[i] < (st_P1 - DELTA - 0.005) && P[i] > (st_P2 + DELTA)) sw1_num_p[k]++;[m
[31m-							if (P[i] < (st_P2 - DELTA-0.005) && P[i] > (st_P3 + DELTA)) sw2_num_p[k]++;[m
[31m-							if (P[i] < (3.2627) && P[i] > (st_P3 + DELTA)) sw3_num_p[k]++;[m
[31m-[m
[31m-							if (R[i] < (st_R1 - DELTA) && R[i] > (st_R2 + DELTA)) sw1_num_r[k]++;[m
[31m-							if (R[i] < (st_R2 - DELTA) && R[i] > (st_R3 + DELTA)) sw2_num_r[k]++;[m
[31m-							if (R[i] < (st_R1 - 0.03) && R[i] > (st_R3 + DELTA)) sw3_num_r[k]++;[m
[31m-[m
[31m-							if (U[i] < (st_U1 - DELTA) && U[i] > (st_U2 + DELTA)) sw1_num_u[k]++;[m
[31m-							if (U[i] < (st_U2 - DELTA) && U[i] > (st_U3 + DELTA)) sw2_num_u[k]++;[m
[31m-							if (U[i] < (st_U1 - 0.03) && U[i] > (st_U3 + DELTA)) sw3_num_u[k]++;[m
[31m-#elif (PROBLEM == 4)[m
[31m-						if (P[i] < (st_P1 - DELTA - 0.005) && P[i] > (st_P2 + DELTA)) sw1_num_p[k]++;[m
[31m-						if (P[i] < (st_P2 - DELTA - 0.005) && P[i] > (st_P3 + DELTA)) sw2_num_p[k]++;[m
[31m-						if (P[i] < (st_P1 - DELTA - 0.02) && P[i] > (st_P3 + DELTA)) sw3_num_p[k]++;[m
[31m-[m
[31m-						if (R[i] < (st_R1 - DELTA) && R[i] > (st_R2 + DELTA)) sw1_num_r[k]++;[m
[31m-						if (R[i] < (st_R2 - DELTA) && R[i] > (st_R3 + DELTA)) sw2_num_r[k]++;[m
[31m-						if (R[i] < (st_R1 - 0.03) && R[i] > (st_R3 + DELTA)) sw3_num_r[k]++;[m
[31m-[m
[31m-						if (U[i] < (st_U1 - DELTA) && U[i] > (st_U2 + DELTA)) sw1_num_u[k]++;[m
[31m-						if (U[i] < (st_U2 - DELTA) && U[i] > (st_U3 + DELTA)) sw2_num_u[k]++;[m
[31m-						if (U[i] < (st_U1 - 0.03) && U[i] > (st_U3 + DELTA)) sw3_num_u[k]++;[m
[31m-[m
[31m-							[m
[31m-#endif[m
[31m-#endif[m
[31m-		[m
[31m-						//-----------------------------[m
[31m-[m
[31m-						fprintf(fout, "%9.6lf %lf %lf %lf %lf %lf %lf\n", x_layer[i], ds, us, ps, cs, es, es_diff);[m
[31m-#ifdef NC[m
[31m-						fprintf(fout_NC, "%9.6lf %lf %lf %lf %lf %lf \n", x_layer_NC[i], ds, us, ps, cs, es);[m
[31m-#endif[m
[31m-[m
[31m-					}[m
[31m-					[m
[31m-					fclose(fout);[m
[31m-[m
[31m-#ifdef NC[m
[31m-					fclose(fout_NC);[m
[31m-[m
[31m-[m
[31m-#endif[m
[31m-#if(PROBLEM==2 || PROBLEM==9)[m
[31m-				analitical_riemann_modeling(numcells, initial_density(0.05), initial_velocity(0.05), initial_pressure(0.05), initial_density(0.95), initial_velocity(0.95), initial_pressure(0.95), timer, all_exact_R, all_exact_U, all_exact_P);[m
[31m-				analitical_writing_into_file(numcells, all_exact_R, all_exact_U, all_exact_P, time_control[k]);[m
[31m-#endif[m
[31m-				proverka[k] = 1;[m
[31m-[m
[31m-			}[m
[31m-		}[m
 [m
 [m
 #endif[m
[1mdiff --git a/rel2/Godunov_1d_omp.exe b/rel2/Godunov_1d_omp.exe[m
[1mindex 1aefc55..3d7d411 100644[m
Binary files a/rel2/Godunov_1d_omp.exe and b/rel2/Godunov_1d_omp.exe differ
